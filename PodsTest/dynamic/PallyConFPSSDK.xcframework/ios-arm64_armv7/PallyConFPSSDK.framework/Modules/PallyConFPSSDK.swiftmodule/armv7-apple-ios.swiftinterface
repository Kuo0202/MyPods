// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PallyConFPSSDK
import AVFoundation
import CoreData
import Foundation
@_exported import PallyConFPSSDK
import Swift
import UIKit
extension PallyConFPSSDK {
  @available(iOS 10.0, *)
  @objc dynamic public func createDownloadTask(url: Foundation.URL, token: Swift.String, downloadOptions: Swift.String = String(), isCelluraAccess: Swift.Bool = true, downloadDelegate: PallyConFPSDownloadDelegate?) -> DownloadTask
  @available(iOS 10.0, *)
  @objc dynamic public func createDownloadTask(url: Foundation.URL, userId: Swift.String, contentId: Swift.String, token: Swift.String, downloadOptions: Swift.String = String(), isCelluraAccess: Swift.Bool = true, downloadDelegate: PallyConFPSDownloadDelegate?) -> DownloadTask
  @available(iOS 10.0, *)
  @objc dynamic public func createDownloadTask(url: Foundation.URL, userId: Swift.String, contentId: Swift.String, optionalId: Swift.String, downloadOptions: Swift.String = String(), isCelluraAccess: Swift.Bool = true, downloadDelegate: PallyConFPSDownloadDelegate?) -> DownloadTask
  @available(iOS 10.0, *)
  @objc dynamic public func createDownloadTask(url: Foundation.URL, contentId: Swift.String, licenseUrl: Swift.String, appleCertUrl: Swift.String, downloadOptions: Swift.String = String(), isCelluraAccess: Swift.Bool = true, downloadDelegate: PallyConFPSDownloadDelegate?) -> DownloadTask
}
@available(iOS 10.0, *)
@objc public class PallyConHLSInfo : ObjectiveC.NSObject {
  @objc public init(_ hlsUrl: Swift.String)
  @objc public func getAllTrackInfo() -> Swift.String
  @objc public func getVideoResolutionSize() -> Swift.String
  @objc public func getVideoBitrateSiz() -> Swift.String
  @objc public func getHLSPallyConMeta() -> Swift.String
  @objc public func getAudioLanguageSize() -> Swift.String
  @objc public func getSubtitleLanguageSize() -> Swift.String
  @objc public func extractPallyConHLSInfo() throws
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum DrmType : Swift.Int8 {
  case playReady = 0
  case wideVine
  case fairPlay
  public typealias RawValue = Swift.Int8
  public init?(rawValue: Swift.Int8)
  public var rawValue: Swift.Int8 {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PallyConTokenInfo : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class PallyConCustomDataInfo : ObjectiveC.NSObject {
  @objc final public let contentId: Swift.String
  @objc final public let userId: Swift.String
  @objc final public let optionalId: Swift.String
  @objc final public let liveKeyRotation: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc public class PallyConFPSSDK : ObjectiveC.NSObject {
  @objc public init(fpsLicenseDelegate: PallyConFPSLicenseDelegate?) throws
  @objc public init(siteId: Swift.String, siteKey: Swift.String, fpsLicenseDelegate: PallyConFPSLicenseDelegate?) throws
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, token: Swift.String, licenseUrl: Swift.String = String(), appleCertUrl: Swift.String = String())
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, userId: Swift.String, contentId: Swift.String, token: Swift.String, licenseUrl: Swift.String = String(), appleCertUrl: Swift.String = String(), liveKeyRotation: Swift.Bool = false)
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, userId: Swift.String, contentId: Swift.String, optionalId: Swift.String, liveKeyRotation: Swift.Bool = false)
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, contentId: Swift.String, licenseUrl: Swift.String, appleCertUrl: Swift.String, liveKeyRotation: Swift.Bool = false)
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, customData: Swift.String) throws
  @objc public func prepare(urlAsset: AVFoundation.AVURLAsset, customData: Swift.String, appleCertUrl: Swift.String) throws
  @available(iOS 10.0, *)
  @objc public func getOfflineLicenseExpireDate(contentId: Swift.String) throws -> Swift.String
  @objc public func removeLicense(contentId: Swift.String) throws
  @objc public func getCustomDataInfo(from customData: Swift.String) throws -> PallyConCustomDataInfo
  @objc public func getCustomDataForChromcast(userId: Swift.String, contentId: Swift.String, optionalId: Swift.String) throws -> Any
  @objc public func getCustomDataForChromcast(token: Swift.String) -> Any?
  @objc public static func getTokenInfo(from token: Swift.String) throws -> PallyConTokenInfo
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @available(iOS 10.0, *)
@objc public class DownloadTask : ObjectiveC.NSObject {
  @objc public func resume()
  @objc public func cancel()
  @objc override dynamic public init()
  @objc deinit
}
public enum PallyConSDKException : Swift.Error {
  case DatabaseProcessError(Swift.String)
  case InternalException(Swift.String)
  case ServerConnectionFail(Swift.String)
  case NetworkError(Swift.Error)
  case AcquireLicenseFailFromServer(Swift.Int, Swift.String)
  case GetContentInformationFail(Swift.String)
  case InvalidParameter(Swift.String)
  case DownloadUserCancel(Swift.String)
  case DownloadUnknownError(Swift.String)
  case DownloadDefaultError(Swift.Error, Swift.String)
  case UnauthorizedUserError(Swift.String)
}
@objc public protocol PallyConFPSDownloadDelegate : ObjectiveC.NSObjectProtocol {
  @available(iOS 10.0, *)
  @objc func downloadContent(_ contentId: Swift.String, didStartDownloadWithAsset asset: AVFoundation.AVURLAsset, subtitleDisplayName: Swift.String)
  @available(iOS 10.0, *)
  @objc func downloadContent(_ contentId: Swift.String, didStopWithError error: Swift.Error?)
  @available(iOS 10.0, *)
  @objc func downloadContent(_ contentId: Swift.String, didFinishDownloadingTo location: Foundation.URL)
  @available(iOS 10.0, *)
  @objc func downloadContent(_ contentId: Swift.String, didLoad timeRange: CoreMedia.CMTimeRange, totalTimeRangesLoaded loadedTimeRanges: [Foundation.NSValue], timeRangeExpectedToLoad: CoreMedia.CMTimeRange)
}
@objc public protocol PallyConFPSLicenseDelegate : ObjectiveC.NSObjectProtocol {
  @objc func fpsLicenseDidSuccessAcquiring(contentId: Swift.String)
  @objc func fpsLicense(contentId: Swift.String, didFailWithError error: Swift.Error)
}
@objc @_inheritsConvenienceInitializers public class Customer : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension Customer {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Customer>
  @objc @NSManaged dynamic public var siteCert: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var siteId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var license: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension Customer {
  @objc(addLicenseObject:) @NSManaged dynamic public func addToLicense(_ value: License)
  @objc(removeLicenseObject:) @NSManaged dynamic public func removeFromLicense(_ value: License)
  @objc(addLicense:) @NSManaged dynamic public func addToLicense(_ values: Foundation.NSSet)
  @objc(removeLicense:) @NSManaged dynamic public func removeFromLicense(_ values: Foundation.NSSet)
}
@objc @_inheritsConvenienceInitializers public class License : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension License {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<License>
  @objc @NSManaged dynamic public var cId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var downloadDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var licenseType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var optionalId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var persistentKey: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var customer: Customer? {
    @objc get
    @objc set
  }
}
extension DrmType : Swift.Equatable {}
extension DrmType : Swift.Hashable {}
extension DrmType : Swift.RawRepresentable {}
